version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=root_password
      - MYSQL_DATABASE=blogger_db
      - MYSQL_USER=blogger_user
      - MYSQL_PASSWORD=blogger_password
    volumes:
      - mysql_data:/var/lib/mysql
      - ./server/database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    restart: unless-stopped
    networks:
      - blogger-network

  # Backend API
  api:
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USERNAME=blogger_user
      - DB_PASSWORD=blogger_password
      - DB_DATABASE=blogger_db
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=7d
    depends_on:
      mysql:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - blogger-network

  # Frontend Web App
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    ports:
      - "80:80"
    environment:
      - NODE_ENV=production
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - blogger-network

  # Redis (for caching)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 20s
      retries: 5
    restart: unless-stopped
    networks:
      - blogger-network

volumes:
  mysql_data:
  redis_data:

networks:
  blogger-network:
    driver: bridge
